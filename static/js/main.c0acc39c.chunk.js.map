{"version":3,"sources":["components/Project_Card.js","components/Landing_Page.js","components/About_Me.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Project_Card","this","props","projects","map","project","style","margin","marginBottom","Col","shadow","maxWidth","height","textAlign","color","background","image","projectTitle","description","border","colored","textDecoration","href","gitHubLink","Component","Landing_Page","state","className","Container","Row","display","flexDirection","justifyContent","About_Me","fluid","src","alt","class","Main","exact","path","component","Home","App","fixedHeader","title","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0acc39c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Card,\r\n    CardTitle,\r\n    CardText,\r\n    CardActions,\r\n    Button,\r\n} from 'react-mdl';\r\n\r\nimport {Col} from 'react-bootstrap'\r\n\r\n\r\nclass Project_Card extends Component {\r\n    render() {\r\n        return this.props.projects.map((project) => (\r\n            <div style={{margin: 'auto 3%', marginBottom: 60}}>\r\n                <Col>\r\n                    <Card shadow={3} style={{maxWidth: '100%', height: '550px'}}>\r\n                        <CardTitle style={{ textAlign: 'center' ,color: '#fff', height: '300px', background: `url(${project.image}) center / cover`}}></CardTitle>\r\n                        <CardText style={{height: '250px'}}>\r\n                          <h5>{project.projectTitle}</h5>  \r\n                            {project.description}\r\n                        </CardText>\r\n                        <CardActions border>\r\n                            <Button colored ><a style={{ color:'blue', textDecoration: 'none'}} href={project.gitHubLink}>GitHub</a></Button>\r\n                        </CardActions>\r\n                    </Card> \r\n                </Col>\r\n              \r\n            </div>\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Project_Card;\r\n","import React, { Component } from 'react'\r\nimport Project_Card from './Project_Card';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nexport class Landing_Page extends Component {\r\n    state = {\r\n        projects: [\r\n            {\r\n                color:'#8A2BE2',\r\n                image: '../img/wordpigeon.png',\r\n                projectTitle: 'WordPigeon',\r\n                description: 'WordPigeon can identify objects within images using a machine learning model and translate them using the Firebase API. The translations can be printed to the Brother QL-800 label printer and stuck on surfaces.  Made to help language learners find a more interactive way to learn vocabulary of foreign languages. ',\r\n                gitHubLink: 'https://github.com/jongjam/WordPigeon'\r\n            },\r\n            {\r\n                color: '#EE82EE',\r\n                image: '../img/cherrylogo.png',\r\n                projectTitle: 'Cherry Jokes',\r\n                description: 'A simple app directed towards the elderly that holds a database of silly jokes that can be printed as stickers using the Brother QL-800 label printer and stuck on surfaces. Made to bring smiles to the elderly during the quarantine.',\r\n                gitHubLink:'https://github.com/jongjam/Cherry-Jokes'\r\n            },\r\n            {\r\n                color: '#3076F0',\r\n                image: '../img/ai.jpg',\r\n                projectTitle: 'Automated Assistant',\r\n                description: 'A small, homemade glass pane holographic display that utilizes devices with LCD screens to display selfmade 2D images of  a self coded AI assistant that responds to basic voice commands. ',\r\n                gitHubLink:'https://github.com/JhongHawan/Project-ELOC'\r\n            }\r\n        ]\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"all\">\r\n                <div>\r\n                    <div className=\"landing-img\">\r\n                        <div className=\"banner-text\">\r\n                        <h1>Full Stack Web Developer</h1>\r\n                        <hr />\r\n                        <p>HTML/CSS | React JS | Java | </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"project-section\"> \r\n                    <section>\r\n                    <Container>\r\n                        <Row style={{\r\n                            display: 'flex', \r\n                            flexDirection: 'row',\r\n                            justifyContent: 'center'\r\n                        }}>\r\n                            <Project_Card projects={this.state.projects}></Project_Card>\r\n                        </Row>\r\n                    </Container>   \r\n                    </section>\r\n                       \r\n                </div>\r\n                \r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing_Page;\r\n","import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nexport class About_Me extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container fluid=\"md\">\r\n                    <Row>\r\n                        <Col><img src='../../grad.jpg' alt='grad' class=\"about-me\"/></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col><h1 class =\"about-me-head\">Hello, my name is James Jhong!</h1></Col>\r\n                        <p class=\"am-para1\">I'm a first year Engineering Student at UW and I aspire to become an embedded systems engineer! The more I have interacted with different technologies,\r\n                            I've become fascinated by the bond between hardware and software. Computers are in all of the technologies we use today, whether we can see them or not,\r\n                            and I want to have the power to create and control powerful harmonies between computers and hard technology. I'd love to learn more in the Electrical Engineering\r\n                            Department, but as of now, I have learned HTML/CSS, React JS, and Java to set me in the path, with a simple Automated Assistant under my experience belt.\r\n                        </p>\r\n                        <p class=\"am-para2\"> To make the best technology, I need to have the sharpest mind, and that requires a fit body. To keep myself strong and healthy, you can find me at home lugging \r\n                            rice bags and water jugs to keep my muscles tight and strong. And to fuel myself properly, I cook most of my meals, and my specialty is the French Omelette. Fancy. \r\n                            I also have hopes to study and work abroad, so I'm glad to say I speak fluent Korean and am in the process of learning Mandarin. The world is full of knowledge, \r\n                            so as a young man, I might as well learn it.\r\n                        </p>\r\n                    </Row>\r\n                </Container>\r\n                \r\n                <p></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About_Me;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Home from './Landing_Page';\r\nimport About_Me from './About_Me';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={ Home } />\r\n            <Route path=\"/home\" component={ Home } />\r\n            <Route path='/about' component={ About_Me } />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\r\nimport Main from './components/main';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={{height: '100%'}}>\r\n        <Layout fixedHeader>\r\n            <Header className=\"header-color\"title={<span><span style={{ color: '/ddd' }}> </span><strong>James Jhong</strong></span>}>\r\n                <Navigation>\r\n                    <Link to=\"/home\">Home</Link>\r\n                    <Link to=\"/about\">About Me</Link>\r\n                </Navigation>\r\n            </Header>\r\n            <Drawer title=\"\">\r\n                <Navigation>\r\n                    <Link to=\"/home\">Home</Link>\r\n                    <Link to=\"/about\">About Me</Link>\r\n                </Navigation>\r\n            </Drawer>\r\n            <Content>\r\n                <div className=\"page-content\" />\r\n                <Main/>\r\n            </Content>\r\n        </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}